# OASIS_START
# DO NOT EDIT (digest: a04b61416bfd846b150ecf9f7b37ab54)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library sqlexpr
"src/sqlexpr.cmxs": use_sqlexpr
<src/*.ml{,i,y}>: package(csv)
<src/*.ml{,i,y}>: package(estring)
<src/*.ml{,i,y}>: package(lwt)
<src/*.ml{,i,y}>: package(lwt.syntax)
<src/*.ml{,i,y}>: package(lwt.unix)
<src/*.ml{,i,y}>: package(sqlite3)
<src/*.ml{,i,y}>: package(threads)
<src/*.ml{,i,y}>: package(unix)
# Library sqlexpr_syntax
"src/syntax/sqlexpr_syntax.cmxs": use_sqlexpr_syntax
<src/syntax/*.ml{,i,y}>: package(camlp4.lib)
<src/syntax/*.ml{,i,y}>: package(camlp4.quotations.r)
<src/syntax/*.ml{,i,y}>: package(estring)
# Library ppx_sqlexpr
"src/ppx/ppx_sqlexpr.cmxs": use_ppx_sqlexpr
<src/ppx/*.ml{,i,y}>: package(compiler-libs.common)
<src/ppx/*.ml{,i,y}>: package(csv)
<src/ppx/*.ml{,i,y}>: package(estring)
<src/ppx/*.ml{,i,y}>: package(lwt)
<src/ppx/*.ml{,i,y}>: package(lwt.syntax)
<src/ppx/*.ml{,i,y}>: package(lwt.unix)
<src/ppx/*.ml{,i,y}>: package(ppx_core)
<src/ppx/*.ml{,i,y}>: package(ppx_driver)
<src/ppx/*.ml{,i,y}>: package(ppx_tools)
<src/ppx/*.ml{,i,y}>: package(ppx_tools.metaquot)
<src/ppx/*.ml{,i,y}>: package(re.pcre)
<src/ppx/*.ml{,i,y}>: package(sqlite3)
<src/ppx/*.ml{,i,y}>: package(threads)
<src/ppx/*.ml{,i,y}>: package(unix)
<src/ppx/*.ml{,i,y}>: use_sqlexpr
# Executable ppx
<src/as_ppx/ppx.{native,byte}>: package(compiler-libs.common)
<src/as_ppx/ppx.{native,byte}>: package(csv)
<src/as_ppx/ppx.{native,byte}>: package(estring)
<src/as_ppx/ppx.{native,byte}>: package(lwt)
<src/as_ppx/ppx.{native,byte}>: package(lwt.syntax)
<src/as_ppx/ppx.{native,byte}>: package(lwt.unix)
<src/as_ppx/ppx.{native,byte}>: package(ppx_core)
<src/as_ppx/ppx.{native,byte}>: package(ppx_driver)
<src/as_ppx/ppx.{native,byte}>: package(ppx_tools)
<src/as_ppx/ppx.{native,byte}>: package(ppx_tools.metaquot)
<src/as_ppx/ppx.{native,byte}>: package(re.pcre)
<src/as_ppx/ppx.{native,byte}>: package(sqlite3)
<src/as_ppx/ppx.{native,byte}>: package(threads)
<src/as_ppx/ppx.{native,byte}>: package(unix)
<src/as_ppx/ppx.{native,byte}>: use_ppx_sqlexpr
<src/as_ppx/ppx.{native,byte}>: use_sqlexpr
<src/as_ppx/*.ml{,i,y}>: package(compiler-libs.common)
<src/as_ppx/*.ml{,i,y}>: package(csv)
<src/as_ppx/*.ml{,i,y}>: package(estring)
<src/as_ppx/*.ml{,i,y}>: package(lwt)
<src/as_ppx/*.ml{,i,y}>: package(lwt.syntax)
<src/as_ppx/*.ml{,i,y}>: package(lwt.unix)
<src/as_ppx/*.ml{,i,y}>: package(ppx_core)
<src/as_ppx/*.ml{,i,y}>: package(ppx_driver)
<src/as_ppx/*.ml{,i,y}>: package(ppx_tools)
<src/as_ppx/*.ml{,i,y}>: package(ppx_tools.metaquot)
<src/as_ppx/*.ml{,i,y}>: package(re.pcre)
<src/as_ppx/*.ml{,i,y}>: package(sqlite3)
<src/as_ppx/*.ml{,i,y}>: package(threads)
<src/as_ppx/*.ml{,i,y}>: package(unix)
<src/as_ppx/*.ml{,i,y}>: use_ppx_sqlexpr
<src/as_ppx/*.ml{,i,y}>: use_sqlexpr
# Executable example
<tests/example.{native,byte}>: package(camlp4.lib)
<tests/example.{native,byte}>: package(camlp4.quotations.r)
<tests/example.{native,byte}>: package(csv)
<tests/example.{native,byte}>: package(estring)
<tests/example.{native,byte}>: package(lwt)
<tests/example.{native,byte}>: package(lwt.syntax)
<tests/example.{native,byte}>: package(lwt.unix)
<tests/example.{native,byte}>: package(sqlite3)
<tests/example.{native,byte}>: package(threads)
<tests/example.{native,byte}>: package(unix)
<tests/example.{native,byte}>: use_sqlexpr
<tests/example.{native,byte}>: use_sqlexpr_syntax
<tests/*.ml{,i,y}>: package(camlp4.lib)
<tests/*.ml{,i,y}>: package(camlp4.quotations.r)
<tests/*.ml{,i,y}>: use_sqlexpr_syntax
# Executable example_ppx
<tests/example_ppx.{native,byte}>: oasis_executable_example_ppx_byte
<tests/*.ml{,i,y}>: oasis_executable_example_ppx_byte
<tests/example_ppx.{native,byte}>: oasis_executable_example_ppx_native
<tests/*.ml{,i,y}>: oasis_executable_example_ppx_native
<tests/example_ppx.{native,byte}>: package(csv)
<tests/example_ppx.{native,byte}>: package(estring)
<tests/example_ppx.{native,byte}>: package(lwt)
<tests/example_ppx.{native,byte}>: package(lwt.syntax)
<tests/example_ppx.{native,byte}>: package(lwt.unix)
<tests/example_ppx.{native,byte}>: package(sqlite3)
<tests/example_ppx.{native,byte}>: package(threads)
<tests/example_ppx.{native,byte}>: package(unix)
<tests/example_ppx.{native,byte}>: use_sqlexpr
# Executable t_ppx_parse
<tests/t_ppx_parse.{native,byte}>: oasis_executable_t_ppx_parse_byte
<tests/*.ml{,i,y}>: oasis_executable_t_ppx_parse_byte
<tests/t_ppx_parse.{native,byte}>: oasis_executable_t_ppx_parse_native
<tests/*.ml{,i,y}>: oasis_executable_t_ppx_parse_native
<tests/t_ppx_parse.{native,byte}>: package(csv)
<tests/t_ppx_parse.{native,byte}>: package(estring)
<tests/t_ppx_parse.{native,byte}>: package(lwt)
<tests/t_ppx_parse.{native,byte}>: package(lwt.syntax)
<tests/t_ppx_parse.{native,byte}>: package(lwt.unix)
<tests/t_ppx_parse.{native,byte}>: package(oUnit)
<tests/t_ppx_parse.{native,byte}>: package(sqlite3)
<tests/t_ppx_parse.{native,byte}>: package(threads)
<tests/t_ppx_parse.{native,byte}>: package(unix)
<tests/t_ppx_parse.{native,byte}>: use_sqlexpr
<tests/*.ml{,i,y}>: package(csv)
<tests/*.ml{,i,y}>: package(estring)
<tests/*.ml{,i,y}>: package(lwt)
<tests/*.ml{,i,y}>: package(lwt.syntax)
<tests/*.ml{,i,y}>: package(lwt.unix)
<tests/*.ml{,i,y}>: package(oUnit)
<tests/*.ml{,i,y}>: package(sqlite3)
<tests/*.ml{,i,y}>: package(threads)
<tests/*.ml{,i,y}>: package(unix)
<tests/*.ml{,i,y}>: use_sqlexpr
# OASIS_STOP
true: thread
<src/*.ml{,i}>: syntax(camlp4o)
<src/syntax/*.ml{,i}>: syntax(camlp4o)
"src/ppx/ppx_sqlexpr.ml": cppo_V_OCAML
<src/ppx/*>: linkall
true: predicate(custom_ppx)
<src/as_ppx/ppx.{byte,native}>: predicate(ppx_driver)
